generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guest {
  id                  String      @id @default(cuid())
  firstName           String
  lastName            String
  email               String      @unique
  phone               String?
  numberOfGuests      Int         @default(1)
  dietaryRestrictions String?
  specialRequests     String?
  status              Status      @default(CONFIRMED)
  checkedIn           Boolean     @default(false)
  checkedInAt         DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  groupId             String?
  thankYouSentAt      DateTime?
  sourceInvitationId  String?
  emailLogs           EmailLog[]
  group               GuestGroup? @relation(fields: [groupId], references: [id])
  sourceInvitation    Invitation? @relation(fields: [sourceInvitationId], references: [id])
  qrCode              QrCode?
  scanLogs            ScanLog[]

  @@map("guests")
}

model QrCode {
  id               String    @id @default(cuid())
  alphanumericCode String    @unique @db.VarChar(8)
  qrCodeData       String
  used             Boolean   @default(false)
  createdAt        DateTime  @default(now())
  guestId          String    @unique
  guest            Guest     @relation(fields: [guestId], references: [id], onDelete: Cascade)
  scanLogs         ScanLog[]

  @@map("qr_codes")
}

model Invitation {
  id           String               @id @default(cuid())
  templateName String
  title        String
  message      String
  imageUrl     String?
  buttonText   String
  formUrl      String?
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  rsvps        Guest[]
  deliveries   InvitationDelivery[]

  @@map("invitations")
}

model GuestGroup {
  id     String  @id @default(cuid())
  name   String  @unique
  guests Guest[]

  @@map("guest_groups")
}

model ScanLog {
  id        String     @id @default(cuid())
  guestId   String?
  qrCodeId  String?
  method    ScanMethod
  success   Boolean
  reason    String?
  createdAt DateTime   @default(now())
  guest     Guest?     @relation(fields: [guestId], references: [id])
  qrCode    QrCode?    @relation(fields: [qrCodeId], references: [id])

  @@map("scan_logs")
}

model EmailLog {
  id        String    @id @default(cuid())
  messageId String    @unique
  guestId   String?
  type      String
  status    String
  error     String?
  sentAt    DateTime  @default(now())
  openedAt  DateTime?
  clickedAt DateTime?
  guest     Guest?    @relation(fields: [guestId], references: [id])

  @@map("email_logs")
}

model InvitationDelivery {
  id             String          @id @default(cuid())
  invitationId   String
  channel        DeliveryChannel
  status         DeliveryStatus  @default(PENDING)
  recipientEmail String?
  recipientPhone String?
  messageId      String?
  error          String?
  trackingId     String          @unique
  sentAt         DateTime        @default(now())
  deliveredAt    DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  invitation     Invitation      @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("invitation_deliveries")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum ScanMethod {
  SCAN
  MANUAL
}

enum DeliveryChannel {
  EMAIL
  WHATSAPP
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  OPENED
  CLICKED
}

enum Status {
  PENDING
  CONFIRMED
  DECLINED
}
